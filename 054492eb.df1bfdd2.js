(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{71:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return r})),a.d(t,"metadata",(function(){return s})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return b}));var n=a(3),l=a(7),i=(a(0),a(96)),r={id:"ll",title:"Linked List",sidebar_label:"Linked List",hide_title:!0},s={unversionedId:"java/ll",id:"java/ll",isDocsHomePage:!1,title:"Linked List",description:"Linked List (java.util.collections)",source:"@site/docs/java/LinkedList.md",slug:"/java/ll",permalink:"/InfoSite/docs/java/ll",editUrl:"https://github.com/akashghanate/InfoSite/docs/java/LinkedList.md",version:"current",sidebar_label:"Linked List",sidebar:"docs",previous:{title:"Utility Methods",permalink:"/InfoSite/docs/java/ul"},next:{title:"Tips & Tricks",permalink:"/InfoSite/docs/java/tips"}},c=[{value:"Linked List (java.util.collections)",id:"linked-list-javautilcollections",children:[{value:"Instantiate",id:"instantiate",children:[]},{value:"Methods (ll)",id:"methods-ll",children:[]}]}],p={toc:c};function b(e){var t=e.components,a=Object(l.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"linked-list-javautilcollections"},"Linked List (java.util.collections)"),Object(i.b)("p",null,"Linked List is a part of the Collection framework present in java.util package. This class is an implementation of the LinkedList data structure which is a linear data structure where the elements are not stored in contiguous locations and every element is a separate object with a data part and address part. The elements are linked using pointers and addresses. Each element is known as a node."),Object(i.b)("h3",{id:"instantiate"},"Instantiate"),Object(i.b)("pre",null,Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"LinkedList<datatype> ll = new LinkedList<datatype>();\n")),Object(i.b)("h3",{id:"methods-ll"},"Methods (ll)"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"add()")," - adding element to Linked List"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"ll.add(element);\nll.add(int index, element); //add element at position *index*\nll.addLast(element); //add element at last of list\nll.addFirst(element); //add element at first of list\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"remove()")," - removing element from Linked List"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"ll.remove(element);\nll.remove(int index); //remove element from position *index*\nll.removeLast(element); //remove element from last of list\nll.removeFirst(element); //remove element from first of list\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"size()")," - returns size of list"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"int n = ll.size();\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"contains()")," - returns true/ false if element is present in list"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"int n = ll.contains(element);\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"set()")," - replace element at ",Object(i.b)("em",{parentName:"p"},"index")," "),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"ll.set(int index, newElement);\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"get()")," - returns element at ",Object(i.b)("em",{parentName:"p"},"index")," of list"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"datatype n = ll.get(int index);\ndatatype n = ll.getFirst(int index);\ndatatype n = ll.getLast(int index);\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"Stack operations"),Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"push()")," - push element to the list",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"ll.push(element);\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"pop()")," - pop top element from the list and returns the element",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"datatype n = ll.pop();\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"peek()")," - returns top element of the list without removing ",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"datatype n = ll.peek();\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("strong",{parentName:"li"},"isEmpty()")," - is used to check if a list is empty or not, returns true/false",Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"ll.isEmpty();\n")))))))}b.isMDXComponent=!0}}]);