(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{91:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return b})),a.d(t,"metadata",(function(){return s})),a.d(t,"toc",(function(){return c})),a.d(t,"default",(function(){return l}));var n=a(3),r=a(7),i=(a(0),a(102)),b={id:"sb",title:"String Buffer (String Maipulation)",sidebar_label:"String Buffer",hide_title:!0},s={unversionedId:"java/sb",id:"java/sb",isDocsHomePage:!1,title:"String Buffer (String Maipulation)",description:"String Buffer (String Maipulation) java.lang.StringBuffer",source:"@site/docs/java/stringBuffer.md",slug:"/java/sb",permalink:"/InfoSite/docs/java/sb",editUrl:"https://github.com/facebook/docusaurus/edit/master/website/docs/java/stringBuffer.md",version:"current",sidebar_label:"String Buffer",sidebar:"docs",previous:{title:"Tips & Tricks",permalink:"/InfoSite/docs/java/tips"},next:{title:"Powered by MDX",permalink:"/InfoSite/docs/python/mdx"}},c=[{value:"String Buffer (String Maipulation) java.lang.StringBuffer",id:"string-buffer-string-maipulation-javalangstringbuffer",children:[{value:"Instantiate",id:"instantiate",children:[]},{value:"Methods (s)",id:"methods-s",children:[]}]}],p={toc:c};function l(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"string-buffer-string-maipulation-javalangstringbuffer"},"String Buffer (String Maipulation) java.lang.StringBuffer"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"StringBuffer")," is a peer class of ",Object(i.b)("strong",{parentName:"p"},"String")," that provides much of the functionality of strings.",Object(i.b)("br",null)," String represents fixed-length, immutable character sequences while StringBuffer represents growable and writable character sequences."),Object(i.b)("h3",{id:"instantiate"},"Instantiate"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"simple"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"})," StringBuffer s = new StringBuffer(); \n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"With fixed size (n)"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"StringBuffer s = new StringBuffer(int n);\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},"With initial string (str)"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'StringBuffer s = new StringBuffer(String str);\n\nEg: StringBuffer s = new StringBuffer("InfoSite");\n')))),Object(i.b)("h3",{id:"methods-s"},"Methods (s)"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Length")," of stringBuffer"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"int n = s.length(); \n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Capacity")," of stringBuffer - the total allocated capacity "),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"int n = s.capacity();\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Append")," - append text/number to the exisiting string"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"s.append(String str);\ns.append(int num);\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Insert")," - is used to insert text/ character at the sepcified index poition"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"s.insert(int index, String str);\ns.insert(int index, char ch);\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Reverse")," - Reverse the string"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"s.reverse();\n"))),Object(i.b)("li",{parentName:"ul"},Object(i.b)("p",{parentName:"li"},Object(i.b)("strong",{parentName:"p"},"Delete")," - delete sequence of character in range of ",Object(i.b)("em",{parentName:"p"},"start")," index to ",Object(i.b)("em",{parentName:"p"},"end-1")," index"),Object(i.b)("pre",{parentName:"li"},Object(i.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"s.delete(int startIndex, int endIndex);\ns.deleteCharAt(int index);\n")))))}l.isMDXComponent=!0}}]);