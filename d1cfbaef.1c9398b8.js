(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{92:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return i})),a.d(t,"metadata",(function(){return c})),a.d(t,"toc",(function(){return p})),a.d(t,"default",(function(){return l}));var n=a(3),r=a(7),b=(a(0),a(103)),i={id:"sb",title:"String Buffer (String Maipulation)",sidebar_label:"String Buffer",hide_title:!0},c={unversionedId:"java/sb",id:"java/sb",isDocsHomePage:!1,title:"String Buffer (String Maipulation)",description:"String Buffer (String Maipulation) java.lang.StringBuffer",source:"@site/docs/java/stringBuffer.md",slug:"/java/sb",permalink:"/InfoSite/docs/java/sb",version:"current",sidebar_label:"String Buffer",sidebar:"docs",previous:{title:"Tips & Tricks",permalink:"/InfoSite/docs/java/tips"},next:{title:"BI",permalink:"/InfoSite/docs/java/BI"}},p=[{value:"String Buffer (String Maipulation) java.lang.StringBuffer",id:"string-buffer-string-maipulation-javalangstringbuffer",children:[{value:"Instantiate",id:"instantiate",children:[]},{value:"Methods (s)",id:"methods-s",children:[]}]}],s={toc:p};function l(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(b.b)("wrapper",Object(n.a)({},s,a,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h2",{id:"string-buffer-string-maipulation-javalangstringbuffer"},"String Buffer (String Maipulation) java.lang.StringBuffer"),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"StringBuffer")," is a peer class of ",Object(b.b)("strong",{parentName:"p"},"String")," that provides much of the functionality of strings.",Object(b.b)("br",null)," String represents fixed-length, immutable character sequences while StringBuffer represents growable and writable character sequences."),Object(b.b)("h3",{id:"instantiate"},"Instantiate"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},"simple"),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"})," StringBuffer s = new StringBuffer(); \n"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},"With fixed size (n)"),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"StringBuffer s = new StringBuffer(int n);\n"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},"With initial string (str)"),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),'StringBuffer s = new StringBuffer(String str);\n\nex: StringBuffer s = new StringBuffer("InfoSite");\n')))),Object(b.b)("h3",{id:"methods-s"},"Methods (s)"),Object(b.b)("ul",null,Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("strong",{parentName:"p"},"length()")," - length of stringBuffer"),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"int n = s.length(); \n"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("strong",{parentName:"p"},"capacity()"),"  - the total allocated capacity "),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"int n = s.capacity();\n"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("strong",{parentName:"p"},"append()")," - append text/number to the exisiting string"),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"s.append(String str);\ns.append(int num);\n"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("strong",{parentName:"p"},"insert()")," - is used to insert text/ character at the sepcified index poition"),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"s.insert(int index, String str);\ns.insert(int index, char ch);\n"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("strong",{parentName:"p"},"reverse()")," - Reverse the string"),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"s.reverse();\n"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("strong",{parentName:"p"},"delete()")," - delete sequence of character in range of ",Object(b.b)("em",{parentName:"p"},"start")," index to ",Object(b.b)("em",{parentName:"p"},"end-1")," index"),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"s.delete(int startIndex, int endIndex);\ns.deleteCharAt(int index);\n"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("strong",{parentName:"p"},"replace()")," - replace sequence of character in range of ",Object(b.b)("em",{parentName:"p"},"start")," index to ",Object(b.b)("em",{parentName:"p"},"end-1")," index"),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"s.replace(int startIndex, int endIndex,String replaceStr);\n"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("strong",{parentName:"p"},"appendCodePoint()")," - appends string represntation of the CodePoint argument"),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"s.appendCodePoint(int codePoint);\nex: for int cp = 65, is 'A'\n"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("strong",{parentName:"p"},"codePointAt()")," - returns the characters ASCII (unicode) at the index"),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"int n = s.codePointAt(int index);\n"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("strong",{parentName:"p"},"charAt()")," - returns the character at index"),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"char ch = s.charAt(int index);\n"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("strong",{parentName:"p"},"getChars()")," - copies individual characters from ",Object(b.b)("em",{parentName:"p"},"begin")," to ",Object(b.b)("em",{parentName:"p"},"end")," into the char array from ",Object(b.b)("em",{parentName:"p"},"arrBegin")," index"),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"s.getChars(int Begin, int End, char[] array, int arrBegin);\n"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("strong",{parentName:"p"},"indexOf()")," - returns the index of the ",Object(b.b)("em",{parentName:"p"},"first")," occurrence of subString str"),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"s.indexOf(String str);\n"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("strong",{parentName:"p"},"lastIndexOf()")," - returns the index of the ",Object(b.b)("em",{parentName:"p"},"last")," occurrence of subString str"),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"s.lastIndexOf(String str);\n"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("strong",{parentName:"p"},"setCharAt()")," - replace character at the index"),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"s.setCharAt(int index, char ch);\n"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("strong",{parentName:"p"},"setlength()")," - change the length of stringBuffer"),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"s.setLength(int length);\n"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("strong",{parentName:"p"},"subSequence()")," - returns Char sequence in range of ",Object(b.b)("em",{parentName:"p"},"start")," index to ",Object(b.b)("em",{parentName:"p"},"end-1")," index"),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"String str = s.subSequence(int start,int end);\n"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("strong",{parentName:"p"},"subSting()")," - returns sub string in range of ",Object(b.b)("em",{parentName:"p"},"start")," index to ",Object(b.b)("em",{parentName:"p"},"end-1")," index"),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"String str = s.subString(int start); //extends till end of string   \nString str = s.subString(int start,int end);\n"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("strong",{parentName:"p"},"toString()")," - returns a string representation of sequence"),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"String str = s.toString();\n"))),Object(b.b)("li",{parentName:"ul"},Object(b.b)("p",{parentName:"li"},Object(b.b)("strong",{parentName:"p"},"trimToSize()")," - reduce capacity of stringBuffer to length of string"),Object(b.b)("pre",{parentName:"li"},Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-java"}),"s.trimToString();\n")))))}l.isMDXComponent=!0}}]);