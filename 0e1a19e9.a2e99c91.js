(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{104:function(e,r,n){"use strict";n.d(r,"a",(function(){return d})),n.d(r,"b",(function(){return f}));var o=n(0),t=n.n(o);function c(e,r,n){return r in e?Object.defineProperty(e,r,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[r]=n,e}function a(e,r){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),n.push.apply(n,o)}return n}function i(e){for(var r=1;r<arguments.length;r++){var n=null!=arguments[r]?arguments[r]:{};r%2?a(Object(n),!0).forEach((function(r){c(e,r,n[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(n,r))}))}return e}function s(e,r){if(null==e)return{};var n,o,t=function(e,r){if(null==e)return{};var n,o,t={},c=Object.keys(e);for(o=0;o<c.length;o++)n=c[o],r.indexOf(n)>=0||(t[n]=e[n]);return t}(e,r);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(o=0;o<c.length;o++)n=c[o],r.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(t[n]=e[n])}return t}var p=t.a.createContext({}),l=function(e){var r=t.a.useContext(p),n=r;return e&&(n="function"==typeof e?e(r):i(i({},r),e)),n},d=function(e){var r=l(e.components);return t.a.createElement(p.Provider,{value:r},e.children)},u={inlineCode:"code",wrapper:function(e){var r=e.children;return t.a.createElement(t.a.Fragment,{},r)}},m=t.a.forwardRef((function(e,r){var n=e.components,o=e.mdxType,c=e.originalType,a=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=o,f=d["".concat(a,".").concat(m)]||d[m]||u[m]||c;return n?t.a.createElement(f,i(i({ref:r},p),{},{components:n})):t.a.createElement(f,i({ref:r},p))}));function f(e,r){var n=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var c=n.length,a=new Array(c);a[0]=m;var i={};for(var s in r)hasOwnProperty.call(r,s)&&(i[s]=r[s]);i.originalType=e,i.mdxType="string"==typeof e?e:o,a[1]=i;for(var p=2;p<c;p++)a[p]=n[p];return t.a.createElement.apply(null,a)}return t.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},69:function(e,r,n){"use strict";n.r(r),n.d(r,"frontMatter",(function(){return a})),n.d(r,"metadata",(function(){return i})),n.d(r,"toc",(function(){return s})),n.d(r,"default",(function(){return l}));var o=n(3),t=n(7),c=(n(0),n(104)),a={id:"dockerCompose",sidebar_label:"Docker Compose",hide_title:!0},i={unversionedId:"docker/dockerCompose",id:"docker/dockerCompose",isDocsHomePage:!1,title:"dockerCompose",description:"Docker Compose",source:"@site/docs/docker/dockerCompose.md",slug:"/docker/dockerCompose",permalink:"/InfoSite/docs/docker/dockerCompose",editUrl:"https://github.com/akashghanate/InfoSite/tree/master/docs/docker/dockerCompose.md",version:"current",sidebar_label:"Docker Compose",sidebar:"docs",previous:{title:"dockerfile",permalink:"/InfoSite/docs/docker/dockerfile"},next:{title:"dockerSwarm",permalink:"/InfoSite/docs/docker/dockerSwarm"}},s=[{value:"<strong>Docker Compose</strong>",id:"docker-compose",children:[]}],p={toc:s};function l(e){var r=e.components,n=Object(t.a)(e,["components"]);return Object(c.b)("wrapper",Object(o.a)({},p,n,{components:r,mdxType:"MDXLayout"}),Object(c.b)("h2",{id:"docker-compose"},Object(c.b)("strong",{parentName:"h2"},"Docker Compose")),Object(c.b)("p",null,"Docker Compose makes it easier to configure and run applications made up of ",Object(c.b)("strong",{parentName:"p"},"multiple containers"),". All containers are defined in one YAML file and then run using a single command"),Object(c.b)("p",null,"Each Container will run a stand-alone application and it can communicate with other containers present in the same host"),Object(c.b)("p",null,"Eg: ",Object(c.b)("strong",{parentName:"p"},"MEAN Stack Application")," ","[MongoDB, ExpressJS, Angular, NodeJS]"," using different containers."),Object(c.b)("p",null,"docker-compose.yml  (markup language)\u2192 To run more than one container for a service"),Object(c.b)("p",null,"Eg: docker-compose.yml"),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-yaml"}),'version: \'3.0\' # specify docker-compose vesion\n\n#Define the services/containers to be run\nservices:\n    angular: # name of the first service\n        build: angular-app # specify the directory of Dockefile for angular service\n        ports: \n            - "4200:4200" #specify ports mapping \n\n    express: # name of the second service\n        build: express-server # specify the directory of Dockefile for express service\n        ports: \n            - "3000:3000" #specify ports mapping \n        links: \n            - database # link this service to the database service\n\n    database: # name of the third service\n        image: mongo # specify image to build container from\n        ports: \n        - "27017:27017" #specify ports forewarding \n')),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Terminal Commands:")),Object(c.b)("pre",null,Object(c.b)("code",Object(o.a)({parentName:"pre"},{className:"language-bash"}),"#This commands are executed in the directory where **YAML** file is present for bulding the Compose.\n**docker-compose build -> #**to build the compose  using YAML file\n**docker-compose up ->** #to start compose container srevice \n")))}l.isMDXComponent=!0}}]);